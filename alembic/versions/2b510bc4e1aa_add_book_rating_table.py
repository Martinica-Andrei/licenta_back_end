"""add_book_rating_table

Revision ID: 2b510bc4e1aa
Revises: 882e2b40fcbc
Create Date: 2024-11-04 12:30:26.193675

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = '2b510bc4e1aa'
down_revision: Union[str, None] = '882e2b40fcbc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    op.create_table('book_rating',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('book_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('rating', sa.Enum('Like', 'Dislike'), nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['book.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('book_id', 'user_id', name='unique_book_id_user_id')
    )

    op.execute("""
            CREATE TRIGGER after_book_rating_insert 
            AFTER INSERT ON book_rating
            FOR EACH ROW
            BEGIN
                IF NEW.rating = 'Like' THEN
                    UPDATE book
                    SET nr_likes = nr_likes + 1
                    where id = NEW.book_id;
                ELSE
                    UPDATE book
                    SET nr_dislikes = nr_dislikes + 1
                    where id = NEW.book_id;
                END IF;
            END;""")
    
    # won't work if book_id for rating changes
    op.execute(""" 
            CREATE TRIGGER after_book_rating_update 
            AFTER UPDATE ON book_rating
            FOR EACH ROW
            BEGIN
                IF NEW.rating != OLD.rating THEN
                    IF NEW.rating = 'Like' THEN
                        UPDATE book
                        SET nr_likes = nr_likes + 1, 
                            nr_dislikes = nr_dislikes - 1
                        where id = NEW.book_id;
                    ELSE
                        UPDATE book
                        SET nr_dislikes = nr_dislikes + 1,
                            nr_likes = nr_likes - 1
                        where id = NEW.book_id;
                    END IF;
                END IF;
            END;""")
    
    op.execute("""
            CREATE TRIGGER after_book_rating_delete 
            AFTER DELETE ON book_rating
            FOR EACH ROW
            BEGIN
                IF OLD.rating = 'Like' THEN
                    UPDATE book
                    SET nr_likes = nr_likes - 1
                    where id = OLD.book_id;
                ELSE
                    UPDATE book
                    SET nr_dislikes = nr_dislikes - 1
                    where id = OLD.book_id;
                END IF;
            END;""")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TRIGGER IF EXISTS after_book_rating_insert;")
    op.execute("DROP TRIGGER IF EXISTS after_book_rating_update;")
    op.execute("DROP TRIGGER IF EXISTS after_book_rating_delete;")
    op.drop_table('book_rating')
    # ### end Alembic commands ###
